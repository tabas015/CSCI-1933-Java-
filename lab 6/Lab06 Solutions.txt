//1. Class Design
public class Bus {
  private Passenger[] passengers;
  private int numberPassengers = 0;

  public Bus() {
    passengers = new Passenger[40];
  }

  public Bus(int capacity) {
    if (capacity <= 0) capacity = 1;
    passengers = new Passenger[capacity];
  }

  public boolean addPassenger(Passenger p) {
    if (numberPassengers >= passengers.length) {
      return false;
    }

    passengers[numberPassengers] = p;
    numberPassengers++;
    return true;
  }

  public int numberOfPassengers() {
    return numberPassengers;
  }
}

//2. Time Complexity
This method determines if an array contains two numbers that sum to x.
The time complexity is O(n^2).

O(1)
O(n^2)
O(n)
O(1)

//3. Debugging
Part 1: In the constructor the data member variable is not set. Must use this.data = data.
        setData should not be static. 
	Cannot assign double to an int. Change the constructor parameter to int. 
Part 2: Use .equals() to compare data and "stop"
        Must parse data into an integer to add it to sum, or change String data = s.next() to int data = s.nextInt();
Part 3: b2 is re-declared, and the second b2 will throw a NullPointerException



//4. Code Comprehension
Output for Part 4
main(1): w: 1, i: 2; d: 3.0
doWhatever(1): w: 1, i: 2; d: 3
doWhatever(2): w: 2, i: 2; d: 2
main(2): w: 2, i: 2; d: 3.0
main(3): w: 2, i: 2; d: 0.0

//5. Recursion
public static int powerK(int k, int n) {
    if (n == 0) {
        return 1;
    }

    return k * powerK(k, n-1);
}

//Gopher It

//Building a 2-D array
public static double[][] make2DArray(int row, int column) {
  double[][] arr = new double[row][col];
  for (int i = 0; i < arr.length; i++) {
    for (int j = 0; j < arr[i].length; j++) {
      arr[i][j] = i + j;
    }
  }
  return arr;
}

//Greatest Common Divisor
public static int greatestCommonDivisor(int a, int b) {
  int i = Math.min(a,b);
  while (i > 1) {
    if (a % i == 0 && b % i == 0) {
      return i;
    }
    i--;
  }
  return 1;
}

